# This is an example of creating scenes using littlepolygon_go.  Each
# template is a recipe for building a game object with a number of
# predefined components.  These templates can be refined and ultimately
# instantiated, every level adding or overriding parameters like in CSS.

# The types of the components are enumerated in the python scripts for
# this project which knows how to serialize them to asset userdata.

# just a plain-old shared property, using typical YAML anchor stuff
squidColor: &sc
  r: 155
  g: 255
  b: 75

# A basic squid template with three tentacles and an eye. The "slash" syntax
# is a compact type/name idiom.
go/squid: 
  description: a basic squid with an eye and three tentacles
  enabled: Yes
  tentacle/tentacle1:
    color: *sc
    angle: -30
    length: 96
  tentacle/tentacle2:
    color: *sc
    angle: 0
    length: 128
  tentacle/tentacle3:
    color: *sc
    angle: 30
    length: 96
  eye/myeyeball:
    color: rgb()
    radius: 64

# now we instantiate a bunch of squids.  We use a special bang! to denote
# actual concrete instances

squid!/squid1:
  position: (10,10)

squid!/squid2:
  position: (20,10)

differentColor: &dc
  r: 255
  g: 255
  b: 35

# squid 3 overrides the color

squid!/squid3:
  position: (30,10)
  tentacle/tentacle1:
    color: *dc
  tentacle/tentacle2:
    color: *dc
  tentacle/tentacle3:
    color: *dc

# you'll be able to look this fella up at runtime with find(goContext, "squid3")
